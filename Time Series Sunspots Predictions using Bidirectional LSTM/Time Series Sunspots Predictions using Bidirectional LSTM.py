# -*- coding: utf-8 -*-
"""Submission 2 Time Series - Almas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oq7pZyBA5r0uxchysL1Wqb03yovSVdGH

**Almas Fathin Irbah**
> Dataset : "Sunspots - Monthly Mean Total Sunspot Number - from jan 1749 to jan 2021" \
> Sumber : Kaggle \
> Link Dataset : https://www.kaggle.com/robervalt/sunspots

***Preparation***
"""

from google.colab import files
files.upload()

# u/ dataframe
import pandas as pd
import numpy as np

# u/ split data
from sklearn.model_selection import train_test_split

# u/ preprocessing dan layer
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM,Dense,Bidirectional,Dropout

# u/ visualisasi plot
import matplotlib.pyplot as plt

"""***Read Dataset*** """

df = pd.read_csv('Sunspots.csv')
df

"""***Checking Dataset***"""

print(df.columns)

print(df.shape)

"""***Dropping unnessesary column***"""

df.drop(['Unnamed: 0'], axis=1, inplace=True)
display(df)

"""***Loading date for 1749 - 2021***"""

df['Date'] = pd.to_datetime(df['Date'])  
get_data = (df['Date'] > '1749-01-31') & (df['Date'] <= '2021-01-31')
df.loc[get_data]

df = df.loc[get_data]
display(df)

"""***Checking the missing values***"""

df.isnull().sum()

"""***Plotting each column***"""

df_plot = df
df_plot[df_plot.columns.to_list()].plot(x='Date', y='Monthly Mean Total Sunspot Number', subplots=True, figsize=(15, 9))
plt.show()

dates = df['Date'].values
sunspots = df['Monthly Mean Total Sunspot Number'].values

dates = np.array(dates)
sunspots = np.array(sunspots)

plt.figure(figsize=(15,9))
plt.plot(dates, sunspots)

plt.plot(dates, sunspots)
plt.title('Sunspots', fontsize = 20)
plt.ylabel('Monthly Mean Total Sunspot Number')
plt.xlabel('Datetime')

df.dtypes

"""***Split Dataset***"""

x_train, x_valid, y_train, y_valid = train_test_split(sunspots, dates, train_size=0.8, test_size = 0.2, shuffle = False )

"""***Train data total (80%) and validation (20%)***"""

print('Total Data Train : ',len(x_train))
print('Total Data Validation : ',len(x_valid))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder = True)
  ds = ds.flat_map(lambda w: w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w: (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

"""***Modelling Squential***"""

tf.keras.backend.set_floatx('float64')

train_set = windowed_dataset(x_train, window_size=64, batch_size=200, shuffle_buffer=1000)
val_set = windowed_dataset(x_valid, window_size=64, batch_size=200, shuffle_buffer=1000)

model = Sequential([
    Bidirectional(LSTM(60, return_sequences=True)),
    Bidirectional(LSTM(60)),
    Dense(30, activation="relu"),
    Dense(10, activation="relu"),
    Dense(1),
])

"""***Counting 10% MAE value for callback***"""

Mae = (df['Monthly Mean Total Sunspot Number'].max() - df['Monthly Mean Total Sunspot Number'].min()) * 10/100
print(Mae)

"""***Using Callback <10%***"""

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')<39.82 and logs.get('val_mae')<39.82):
      print("\nMAE from model < 10% Data Scale")
      self.model.stop_training = True
callbacks = myCallback()

"""***Using Learning rate SGD for optimizer***"""

optimizer = tf.keras.optimizers.SGD(lr=1.0000e-04, momentum=0.9)

model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

history = model.fit(train_set, epochs=100, validation_data = val_set, callbacks=[callbacks])

"""***Plotting ccuraccy and loss***"""

# Plot Accuracy
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Akurasi Model')
plt.ylabel('Mae')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()

# Plot Loss
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['Train', 'Val'], loc='upper left')
plt.show()